name: Check KSU Version Update and Build

on:
  schedule:
    - cron: '0 0 * * *'  # 每天午夜运行
  workflow_dispatch:  # 也可以手动触发

jobs:
  check-ksu-version:
    name: "Check KSU Version"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v3

      - name: "Fetch Latest KSU Version from GitHub"
        id: fetch-latest-ksu-version
        run: |
          # 克隆 KernelSU-Next 仓库
          git clone https://github.com/rifsxd/KernelSU-Next.git
          cd KernelSU-Next
          # 获取最新的 KSU_VERSION
          LATEST_KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" 10200)
          echo "Latest KSU Version: $LATEST_KSU_VERSION"
          echo "latest_ksu_version=$LATEST_KSU_VERSION" >> $GITHUB_OUTPUT

      - name: "Fetch Current KSU Version from Local Repository"
        id: fetch-current-ksu-version
        run: |
          # 检查 kernel/Makefile 文件是否存在
          if [ -f kernel/Makefile ]; then
            CURRENT_KSU_VERSION=$(cat kernel/Makefile | grep DKSU_VERSION | cut -d '=' -f2)
            echo "Current KSU Version: $CURRENT_KSU_VERSION"
            echo "current_ksu_version=$CURRENT_KSU_VERSION" >> $GITHUB_OUTPUT
          else
            echo "kernel/Makefile does not exist. Will create a new one."
            echo "current_ksu_version=0" >> $GITHUB_OUTPUT
          fi

      - name: "Compare KSU Versions"
        id: compare-versions
        run: |
          CURRENT_KSU_VERSION=${{ steps.fetch-current-ksu-version.outputs.current_ksu_version }}
          LATEST_KSU_VERSION=${{ steps.fetch-latest-ksu-version.outputs.latest_ksu_version }}
          if [ "$CURRENT_KSU_VERSION" != "$LATEST_KSU_VERSION" ]; then
            echo "KSU version has been updated. Triggering build."
            echo "trigger_build=true" >> $GITHUB_OUTPUT
          else
            echo "KSU version has not changed. No build needed."
            echo "trigger_build=false" >> $GITHUB_OUTPUT
          fi

      - name: "Update or Create KSU Version in Local Repository"
        if: ${{ steps.compare-versions.outputs.trigger_build == 'true' }}
        run: |
          # 更新或创建 kernel/Makefile 文件
          LATEST_KSU_VERSION=${{ steps.fetch-latest-ksu-version.outputs.latest_ksu_version }}
          if [ -f kernel/Makefile ]; then
            # 文件存在，更新 KSU_VERSION
            sed -i "s/DKSU_VERSION=$CURRENT_KSU_VERSION/DKSU_VERSION=$LATEST_KSU_VERSION/" kernel/Makefile
          else
            # 文件不存在，创建并写入 KSU_VERSION
            mkdir -p kernel
            echo "DKSU_VERSION=$LATEST_KSU_VERSION" > kernel/Makefile
          fi
          echo "Updated KSU Version to $LATEST_KSU_VERSION in kernel/Makefile"

      - name: "Commit and Push Changes"
        if: ${{ steps.compare-versions.outputs.trigger_build == 'true' }}
        run: |
          # 提交更改
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add kernel/Makefile
          git commit -m "Update KSU_VERSION to $LATEST_KSU_VERSION"
          git push origin HEAD

      - name: "Trigger Build-Test Workflow"
        if: ${{ steps.compare-versions.outputs.trigger_build == 'true' }}
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Build-test.yml
      # - name: "Trigger Build Workflow"
      #   if: ${{ steps.compare-versions.outputs.trigger_build == 'true' }}
      #   uses: benc-uk/workflow-dispatch@v1
      #   with:
      #     workflow: build.yml
